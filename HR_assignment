--1. employees 테이블에서 job_id 를 중복 배제하여 조회 하고
--   job_title 같이 출력
--19건
SELECT DISTINCT e.JOB_ID
              , j.JOB_TITLE
  FROM employees e
     , jobs j
 WHERE e.JOB_ID = j.JOB_ID
;

--2. employees 테이블에서 사번, 라스트네임, 급여, 커미션 팩터,
--   급여x커미션팩터(null 처리) 조회
--   커미션 컬럼에 대해 null 값이면 0으로 처리하도록 함
--107건
SELECT e.EMPLOYEE_ID                         as "사번"
     , e.LAST_NAME                           as "라스트네임"
     , e.SALARY                              as "급여"
     , NVL(e.COMMISSION_PCT, 0)              as "커미션 팩터"
  FROM employees e
;
 
--3. employees 테이블에서 사번, 라스트네임, 급여, 커미션 팩터(null 값 처리) 조회
--   단, 2007년 이 후 입사자에 대하여 조회, 고용년도 순 오름차순 정렬
--30건
SELECT e.EMPLOYEE_ID                         as "사번"
     , e.LAST_NAME                           as "라스트네임"
     , e.SALARY                              as "급여"
     , NVL(e.COMMISSION_PCT, 0)              as "커미션 팩터"
     , NVL((e.SALARY * e.COMMISSION_PCT), 0) as "급여x커미션팩터"
     ,e.HIRE_DATE
  FROM employees e
 WHERE e.HIRE_DATE > TO_DATE('2007-01-01', 'YYYY-MM-DD')
 ORDER BY e.HIRE_DATE
;

--4. Finance 부서에 소속된 직원의 목록 조회
--조인으로 해결
SELECT e.EMPLOYEE_ID
     , e.FIRST_NAME
     , e.LAST_NAME
  FROM employees e
     , departments d
 WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID
   AND d.DEPARTMENT_NAME = 'Finance'
;
--서브쿼리로 해결
SELECT e.EMPLOYEE_ID
     , e.FIRST_NAME
     , e.LAST_NAME
  FROM employees e
 WHERE e.DEPARTMENT_ID = (SELECT d.DEPARTMENT_ID
                     FROM departments d
                    WHERE d.DEPARTMENT_NAME = 'Finance')
;
--6건
 
--5. Steven King 의 직속 부하직원의 모든 정보를 조회
--14건
-- 조인 이용
SELECT e1.*
  FROM employees e1
     , employees e2
 WHERE e1.MANAGER_ID = e2.EMPLOYEE_ID
   AND e2.FIRST_NAME = 'Steven'
   AND e2.LAST_NAME = 'King'
;
-- 서브쿼리 이용
SELECT *
  FROM employees e
 WHERE e.MANAGER_ID = (SELECT e.EMPLOYEE_ID
                         FROM employees e
                        WHERE e.FIRST_NAME = 'Steven'
                          AND e.LAST_NAME = 'King')
;

--6. Steven King의 직속 부하직원 중에서 Commission_pct 값이 null이 아닌 직원 목록
--5건
SELECT e1.EMPLOYEE_ID                        "직원 사번"
     , e1.FIRST_NAME || ' ' || e1.LAST_NAME  "직원 이름"
     , e2.EMPLOYEE_ID                        "상사 사번"
     , e2.FIRST_NAME || ' ' || e2.LAST_NAME  "상사 이름"
  FROM employees e1
     , employees e2
 WHERE e1.MANAGER_ID = e2.EMPLOYEE_ID
   AND e2.FIRST_NAME = 'Steven'
   AND e2.LAST_NAME = 'King'
   AND e1.COMMISSION_PCT IS NOT NULL
;  

--7. 각 job 별 최대급여를 구하여 출력 job_id, job_title, job별 최대급여 조회
--19건
SELECT e.JOB_ID
     , j.JOB_TITLE
     , MAX(e.SALARY)
  FROM employees e
     , jobs j
 WHERE e.JOB_ID = j.JOB_ID
 GROUP BY e.JOB_ID, j.JOB_TITLE
 ORDER BY 1
;


 
--8. 각 Job 별 최대급여를 받는 사람의 정보를 출력,
--  급여가 높은 순서로 출력
----서브쿼리 이용
SELECT e.JOB_ID
     , e.FIRST_NAME
     , e.LAST_NAME
     , e.SALARY
  FROM employees e
 WHERE (e.JOB_ID, e.SALARY) IN (SELECT e.JOB_ID
                                     , MAX(e.SALARY)
                                  FROM employees e
                                 GROUP BY e.JOB_ID)
 ORDER BY e.SALARY
;

----join 이용
SELECT e1.JOB_ID
     , e1.FIRST_NAME
     , e1.LAST_NAME
     , e1.SALARY
  FROM employees e1
     , (SELECT e.JOB_ID
             , MAX(e.SALARY) "최대 급여"
          FROM employees e
         GROUP BY e.JOB_ID) e2                       
 WHERE e1.JOB_ID = e2.JOB_ID
   AND e1.SALARY = e2."최대 급여"
 ORDER BY e1.SALARY
;

desc employees;

--20건

--9. 7번 출력시 job_id 대신 Job_name, manager_id 대신 Manager의 last_name, department_id 대신 department_name 으로 출력
--20건

SELECT j.JOB_TITLE       "직무"
     , e.LAST_NAME       "사원이름"
     , d.DEPARTMENT_NAME "부서"
     , e1.LAST_NAME      "상사이름"
     , e.SALARY          "급여"
  FROM employees e
     , employees e1
     , jobs j
     , departments d
 WHERE (e.JOB_ID, e.SALARY) IN (SELECT e.JOB_ID
                                     , MAX(e.SALARY)
                                  FROM employees e
                                 GROUP BY e.JOB_ID)
   AND e.JOB_ID = j.JOB_ID
   AND e.DEPARTMENT_ID = d.DEPARTMENT_ID
   AND e.MANAGER_ID = e1.EMPLOYEE_ID(+)
 ORDER BY e.SALARY
;


--10. 전체 직원의 급여 평균을 구하여 출력
SELECT AVG(e.SALARY)
  FROM employees e
;
--11. 전체 직원의 급여 평균보다 높은 급여를 받는 사람의 목록 출력. 급여 오름차순 정렬
--51건

SELECT e.EMPLOYEE_ID
     , e.LAST_NAME
     , e.SALARY
  FROM employees e
 WHERE e.SALARY > (SELECT AVG(e.SALARY) "평균 급여"
                      FROM employees e)
 ORDER BY e.SALARY 
;
--12. 각 부서별 평균 급여를 구하여 출력
--12건

SELECT AVG(e.SALARY) "평균 급여"
  FROM employees e
 GROUP BY e.DEPARTMENT_ID
;
--13. 12번의 결과에 department_name 같이 출력
--12건
SELECT d.DEPARTMENT_NAME "부서"
      , TO_CHAR(AVG(e.SALARY), '$999,999.99') "평균 급여"
  FROM employees e
     , departments d
 WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID(+)
 GROUP BY d.DEPARTMENT_NAME
;

--14. employees 테이블이 각 job_id 별 인원수와 job_title을 같이 출력하고 job_id 오름차순 정렬

SELECT e.JOB_ID    "직무번호"
      , j.JOB_TITLE "직무"
      , COUNT(*)   "직원 수"
  FROM employees e
      , jobs j
 WHERE e.JOB_ID = j.JOB_ID
 GROUP BY e.JOB_ID
        , j.JOB_TITle
 ORDER BY e.JOB_ID
;

--15. employees 테이블의 job_id별 최저급여,
--   최대급여를 job_title과 함께 출력 job_id 알파벳순 오름차순 정렬
SELECT e.JOB_ID         AS "직책번호"
     , j.JOB_TITLE      AS "직책"
     , MIN(e.SALARY)   AS "최저급여" 
     , MAX(e.SALARY)   AS "최대급여"
  FROM employees e 
  JOIN jobs j
    ON e.JOB_ID = j.JOB_ID
 GROUP BY e.JOB_ID
        , j.JOB_TITLE
 ORDER BY e.JOB_ID
;
 


--16. Employees 테이블에서 인원수가 가장 많은 job_id를 구하고
--   해당 job_id 의 job_title 과 그 때 직원의 인원수를 같이 출력

SELECT e.JOB_ID        AS "직무 번호"
     , J.JOB_TITLE     AS "직무"
     , COUNT(*)        AS "인원수"
  FROM EMPLOYEES e
     , JOBS j
 WHERE E.JOB_ID = J.JOB_ID 
 GROUP BY e.JOB_ID
        , J.JOB_TITLE
HAVING COUNT(*) = (SELECT MAX(COUNT(*))
                       FROM EMPLOYEES e
                      GROUP BY e.JOB_ID)
;



--17.사번,last_name, 급여, 직책이름(job_title), 부서명(department_name), 부서매니저이름
--  부서 위치 도시(city), 나라(country_name), 지역(region_name) 을 출력
----------- 부서가 배정되지 않은 인원 고려 ------

SELECT e.EMPLOYEE_ID        "사번"
     , e.LAST_NAME          "이름"
     , e.SALARY             "급여"
     , j.JOB_TITLE          "직무"
     , d.DEPARTMENT_NAME    "부서"
     , e.LAST_NAME          "부서장"
     , l.CITY               "위치"
     , c.COUNTRY_NAME       "국가"
     , r.REGION_NAME        "지역"
  FROM employees e
     , jobs j
     , departments d
     , employees e1
     , locations l
     , countries c
     , regions r
 WHERE e.JOB_ID = j.JOB_ID
   AND e.DEPARTMENT_ID = d.DEPARTMENT_ID (+)
   AND d.MANAGER_ID = e1.EMPLOYEE_ID (+)
   AND d.LOCATION_ID  = l.LOCATION_ID (+)
   AND l.COUNTRY_ID = c.COUNTRY_ID (+) 
   AND c.REGION_ID = r.REGION_ID (+)
;


--18.부서 아이디, 부서명, 부서에 속한 인원숫자를 출력
SELECT d.DEPARTMENT_ID
     , d.DEPARTMENT_NAME
     , (SELECT COUNT(*)
          FROM employees e
         WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID
         GROUP BY e.DEPARTMENT_ID) AS "인원 수"
  FROM departments d
;


--19.인원이 가장 많은 상위 다섯 부서아이디, 부서명, 인원수 목록 출력
SELECT *
  FROM (SELECT d.DEPARTMENT_ID
             , d.DEPARTMENT_NAME
             , (SELECT COUNT(*)
                  FROM employees e
                 WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID
                 GROUP BY e.DEPARTMENT_ID) AS "인원 수"                     
          FROM departments d
         ORDER BY "인원 수" DESC) m
 WHERE m."인원 수" IS NOT NULL
   AND ROWNUM <= 5
;
 
--20. 부서별, 직책별 평균 급여를 구하여라.
--   부서이름, 직책이름, 평균급여 소수점 둘째자리에서 반올림으로 구하여라.
SELECT d.DEPARTMENT_NAME                     AS "부서"
     , j.JOB_TITLE                            AS "직책"
     , TO_CHAR(AVG(e.SALARY), '$999,999.99') AS "평균 급여"
  FROM employees e
     , departments d
     , jobs j
 WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID
   AND e.JOB_ID = j.JOB_ID
 GROUP BY d.DEPARTMENT_NAME
         , j.JOB_TITLE
 ORDER BY "부서", "직책"
;


--21.각 부서의 정보를 부서매니저 이름과 함께 출력(부서는 모두 출력되어야 함)
SELECT d.DEPARTMENT_ID
     , d.DEPARTMENT_NAME
     , d.LOCATION_ID
     , e.LAST_NAME
  FROM departments d
     , employees e
 WHERE d.MANAGER_ID = e.EMPLOYEE_ID(+)
;
 
--22. 부서가 가장 많은 도시이름을 출력
SELECT *
  FROM (SELECT l.CITY   AS "도시 이름"
             , COUNT(*) AS "부서 수"
          FROM departments d
             , locations l
          WHERE d.LOCATION_ID = l.LOCATION_ID
         GROUP BY l.CITY
         ORDER BY "부서 수" DESC)
 WHERE ROWNUM = 1
;

--23. 부서가 없는 도시 목록 출력
--조인사용
SELECT l.LOCATION_ID
     , l.CITY
     , d.DEPARTMENT_ID
  FROM departments d
     , locations l
 WHERE d.LOCATION_ID(+) = l.LOCATION_ID
   AND d.DEPARTMENT_ID IS NULL
;
--집합연산 사용
SELECT l.LOCATION_ID
     , l.CITY
     , d.DEPARTMENT_ID
  FROM locations l
     , departments d
 WHERE l.LOCATION_ID = d.LOCATION_ID (+)
MINUS
SELECT l.LOCATION_ID
     , l.CITY
     , d.DEPARTMENT_ID
  FROM locations l
     , departments d
 WHERE l.LOCATION_ID = d.LOCATION_ID
;
--서브쿼리 사용
SELECT l.LOCATION_ID
     , l.CITY
     , '(null)' as department_id
  FROM locations l
 WHERE NOT l.LOCATION_ID IN (SELECT DISTINCT d.LOCATION_ID
                            FROM departments d)
;
--24.평균 급여가 가장 높은 부서명을 출력
SELECT *
  FROM (SELECT d.DEPARTMENT_NAME                       AS "부서 명"
             , TO_CHAR(AVG(e.SALARY), '$999,999.99') AS "평균 급여"
            FROM employees e
               , departments d
            WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID
            GROUP BY d.DEPARTMENT_NAME
            ORDER BY "평균 급여" DESC)
 WHERE ROWNUM = 1;


--25. Finance 부서의 평균 급여보다 높은 급여를 받는 직원의 목록 출력
SELECT AVG(e.SALARY)
  FROM employees e
 GROUP BY e.DEPARTMENT_ID
HAVING e.DEPARTMENT_ID = (SELECT d.DEPARTMENT_ID
                             FROM departments d
                            WHERE d.DEPARTMENT_NAME = 'Finance')
;

SELECT e1.EMPLOYEE_ID AS "사번"
     , e1.LAST_NAME    AS "이름"
     , e1.SALARY       AS "급여"
  FROM employees e1
 WHERE e1.SALARY > (SELECT AVG(e.SALARY)
                      FROM employees e
                     GROUP BY e.DEPARTMENT_ID
                    HAVING e.DEPARTMENT_ID = (SELECT d.DEPARTMENT_ID
                                                 FROM departments d
                                                WHERE d.DEPARTMENT_NAME = 'Finance')    
                    )
;

-- 26. 각 부서별 인원수를 출력하되, 인원이 없는 부서는 0으로 나와야 하며
--     부서는 정식 명칭으로 출력하고 인원이 많은 순서로 정렬.
SELECT d.DEPARTMENT_NAME       AS "부서 명"
     , COUNT(e.DEPARTMENT_ID) AS "인원 수"
  FROM employees e
     , departments d
 WHERE e.DEPARTMENT_ID(+) = d.DEPARTMENT_ID
 GROUP BY d.DEPARTMENT_NAME
 ORDER BY "인원 수" DESC
;


--27. 지역별 등록된 나라의 갯수 출력(지역이름, 등록된 나라의 갯수)
SELECT r.REGION_NAME AS "지역 이름"
      , count(*)     AS "등록된 나라의 갯수"
  FROM regions r
      , countries c
 WHERE r.REGION_ID = c.REGION_ID
 GROUP BY r.REGION_NAME
;

 
--28. 가장 많은 나라가 등록된 지역명 출력
SELECT r1."지역 이름"
  FROM (SELECT r.REGION_NAME AS "지역 이름"
             , count(*)     AS "등록된 나라의 갯수"
          FROM regions r
             , countries c
         WHERE r.REGION_ID = c.REGION_ID
         GROUP BY r.REGION_NAME
         ORDER BY "등록된 나라의 갯수" DESC) r1
 WHERE ROWNUM = 1
;
