--day05 : sql
----------------------------------------
--ORACLE의 특별한 컬럼

--1.ROWID : 물리적으로 디스크에 저장된 위치를 가르키는 값
--          물리적으로 저장된 위치이므로 한 행당 반드시 유일할 수 밖에 없음
--          ORDER BY 절에 의해서 변경되지 않는 값

--예) EMP테이블에서 'SMITH'인 사람의 정보를 조회
--rowid를 같이 조회

SELECT e.rowid
      ,e.empno
      ,e.ename
  FROM emp e
 WHERE e.ename = 'SMITH'
;
--rowid는 ORDER BY절에 의해 변경되지 않는다.
SELECT e.rowid
      ,e.empno
      ,e.ename
  FROM emp e
 ORDER BY e.ENAME
;
--2.ROWNUM : 조회된 결과의 첫번째 행부터 1로 증가하는 값
SELECT ROWNUM
      ,e.EMPNO
      ,e.ENAME
  FROM emp e
 WHERE e.ENAME LIKE 'J%'
 ORDER BY e.ENAME
;
--위의 두 결과를 비교하면 ROWNUM도 ORDER BY 에
--영향을 받지 않은 것 처럼 보일수 있으나
--SUB쿼리로 사용할때 영향을 받음
SELECT rownum
      ,a.EMPNO
      ,a.ENAME
      ,a.numrow
FROM (SELECT e.EMPNO
            ,e.ENAME
            ,'|'
            ,rownum as numrow
            FROM emp e
          WHERE e.ENAME LIKE 'J%'
          ORDER BY e.ENAME)
          a
;

----------------------------------------------
--DML : 데이터 조작어
----------------------------------------------
CREATE TABLE MEMBER(
  member_id varchar2(3)
 ,member_name varchar2(15) not null
 ,phone varchar2(4)
 ,reg_date date default sysdate
 ,address varchar2(30)
 ,birth_month number(2)
 ,gender varchar2(1)
 ,constraint pk_member primary key(member_id)
 ,constraint ch_member_gender check(gender in('m','f'))
 ,constraint ch_member_birth check(birth_month>0 AND birth_month<=12)
 );
 
 desc member;

insert into member
values ('M01','전현찬','5250',sysdate,'덕명동',11,'m');
insert into member
values ('M02','조성철','9034',sysdate,'오정동',8,'m');
insert into member
values ('M03','김승유','5219',sysdate,'덕명동',1,'m');
----------------------몇몇 컬럼에 null데이터 추가
insert into member
values ('M04','박길수','4003',sysdate,null,null,'m');
insert into member
values ('M05','강현',null,null,'홍도동',6,'m');
insert into member
values ('M06','김소민',null,sysdate,'월평동',null,null);
--check 옵션에 위배되는 데이터 추가시도
insert into member
values ('M07','강병우','2260',sysdate,'사정동',2,'n'); -- gender 위반 'n'
--ORA-02290: check constraint (SCOTT.CH_MEMBER_GENDER) violated
insert into member
values ('M07','강병우','2260',sysdate,'사정동',2,'m'); 

insert into member
values ('M08','정준호',null,sysdate,'나성동',0,null); -- birth_month 위반
--ORA-02290: check constraint (SCOTT.CH_MEMBER_BIRTH) violated 
insert into member
values ('M08','정준호',null,sysdate,'나성동',1,null); 

--2.into구문에 컬럼 이름 명시하여 데이터 추가
--  values절에 into 의 순서대로
--  값의 타입,개수를 맞추어서 작성
insert into member (MEMBER_ID,MEMBER_NAME,GENDER)
values('M09','윤홍식','m');


  
--reg,date 컬럼 : default 설정이 작동하여 시스템 날짜가 자동 입력
--phone,address컬럼 : null 값으로 입력되는 것 확인

--into 절에 컬럼 나열시 테이블 정의 순서와 별개로 나열 가능
insert into member(member_name,address,member_id)
values ('이주영','용전동','M10');

INSERT INTO MEMBER(MEMBER_NAME,MEMBER_ID)
VALUES('남정규','M10');
--ORA-00001: unique constraint (SCOTT.PK_MEMBER) violated
--이름,주소 모두 문자 데이터 이기 때문에 타입이 맞아서
--논리오류 발생
INSERT INTO MEMBER(MEMBER_NAME,MEMBER_ID)
VALUES('남정규','M11');

INSERT INTO MEMBER(MEMBER_ID,MEMBER_NAME)
VALUES('M12');--SQL 오류: ORA-00947: not enough values

INSERT INTO MEMBER(MEMBER_ID,MEMBER_NAME)
VALUES('M12','이동희');

INSERT INTO MEMBER(MEMBER_ID,MEMBER_NAME,BIRTH_MONTH)
VALUES('M13','유재성','M');--ORA-01722: invalid number
--숫자가 들어가는 컬럼에 문자 입력 

INSERT INTO MEMBER(MEMBER_ID,MEMBER_NAME,BIRTH_MONTH)
VALUES('M13','유재성',3);

select m.*
  FROM member m;


------------------------------
--다중행 입력 : SUB-QUERY를 사용하여 가능

--구문구조
INSERT INTO 테이블이름
SELECT 문장; --서브쿼리


CREATE TABLE NEW_MEMBER
AS SELECT * FROM MEMBER
WHERE 0=1;
--MEMBER테이블의 내용을 조회해서  NEW_MEMBER로 INSERT

INSERT INTO NEW_MEMBER
SELECT m.*
  FROM member m
 WHERE m.PHONE IS NOT NULL
;

--NEW_MEMBER 테이블 데이터 삭제 X버튼 클릭후 -->데이터 반영

--성이 '김'씨인 멤버 데이터를 복사입력
INSERT INTO NEW_MEMBER
SELECT M.*
  FROM MEMBER M
 WHERE M.MEMBER_NAME LIKE '김%';


--짝수달에 태어난 멤버데이터를 복사 입력
INSERT INTO NEW_MEMBER
SELECT M.*
  FROM MEMBER M
 WHERE MOD(M.BIRTH_MONTH,2) = 0;  --짝수 논리연산


------------------------------------------------
--U[DQTE : 테이블의 행을 수정
--WHERE 조건절의 조합에 따라 1행 혹은 다행 수정이 가능
--MEMBER 테이블에서 이름이 잘못 들어간 M11멤버 정보를 수정
--데이터 수정 전에 영구반영을 실행
COMMIT;
UPDATE member m
   SET m.MEMBER_NAME = '남정규'
 WHERE m.MEMBER_ID = 'M11'
;

--'M05'회원의 전화번호 필드를 업데이트
COMMIT;
UPDATE member m
   SET m.PHONE = '1743'
-- WHERE m.MEMBER_ID = 'M05'
; --13개 행 이(가) 업데이트되었습니다.
--WHERE 조건절의 실수로 DML작업 실수가 발생
--데이터 상태 되돌리기
ROLLBACK;--롤백완료 / 마지막 커밋상태로 되돌림

UPDATE member m
   SET m.PHONE = '1743'
 WHERE m.MEMBER_ID = 'M05'
; --13개 행 이(가) 업데이트되었습니다.
--WHERE 조건절의 실수로 DML작업 실수가 발생

--2개 이상의 컬럼을 한번에 업데이트  SET절에 나열
UPDATE member m
   SET m.PHONE = '1743'
      ,m.REG_DATE = sysdate
 WHERE m.MEMBER_ID = 'M05'
; 
commit;

--'월평동'사는  '김소민'멤버의 null 업데이트
UPDATE member m
   SET m.PHONE = '4724'
      ,m.BIRTH_MONTH = 1
      ,m.GENDER = 'f'
 WHERE m.ADDRESS = '월평동'
; 
--위의 실행결과는 의도대로 반영되는 것 처럼 보이지만
--월평동에 사는 사람이 많다면
--월평동 모든 사람 정보가 수정될 것이다
--따라서 update 구문작성시 where조건은
--조건을 기울여서 작성해야한다.

/*DML : UPDATE,DELETE 작업시 주의점

딱 하나의 데이터를 수정/삭제 하려면
WHERE절의 비교 조건에 반드시 PK로 설정한
컬럼의 값을 비교하도록 권장

PK는 전체 행에서 유일하고, NOT NULL임이 보장되기 때문

UPDATE,DELETE는 구문에 물리적 오류가 없으면
WHERE 조건에 맞는 전체 행 대상으로 작업하는
것이 기본이므로 항상 주의*/

SELECT * FROM MEMBER;
DESC NEW_MEMBER;

COMMIT;

--update 구문에 select 서브쿼리 사용
--'M08' 아이디의 PHONE과GENDER수정
UPDATE member m
   SET m.PHONE = '3318'
      ,m.GENDER = 'm'
 WHERE m.MEMBER_ID = 'M08'
;
UPDATE member m
   SET m.PHONE = '3318'
      ,m.GENDER = 'm'
 WHERE m.ADDRESS = (SELECT m.ADDRESS
                        FROM member m
                       WHERE m.MEMBER_ID = 'M08')
;
--'M13' 유재성 멤버의 성별 업데이트
UPDATE member m
   SET m.GENDER = (SELECT substr('math',1,1)FROM dual)
 WHERE m.MEMBER_ID = 'M13'
;
SELECT substr('MATH',1,1)
  FROM dual;
;
--delete
--gender가 'f'인 데이터를 삭제
DELETE member m
  WHERE m.GENDER = 'f';
--WHERE조건절을 만족하는 모든 행에 대해 삭제 작업 진행
COMMIT;
--WHERE 조건을 아예 누락 시키는 경우 전체행 삭제
DELETE MEMBER;
--13개 행 이(가) 삭제되었습니다.

ROLLBACK;


select * from member
;
--3.DELETE 의 WHERE에 서브쿼리 조합
--주소가 대전인 사람을 모두 삭제
--(1)주소가 대전인 사람을 조회
SELECT m.*
  FROM member m
 WHERE m.ADDRESS = '대전'
;

SELECT m.*
  FROM member m
 WHERE IN(SELECT m.MEMBER_ID
            FROM member m
            WHERE m.ADDRESS = '대전');
COMMIT;

----------------------
--DELETE vs.TRUNCATE
/*
1.TRUNCATE는 DDL에 속하는 명령어
  ROLLBACK 지점을 생성하지 않음
  따라서 한번 실행된 DDL을 되돌릴 수 없음

2.TRUNCATE는 WHERE절 조합이 안되므로 
  특정 데이터 선별하여 삭제하는 것이 불가능

사용시 주의
*/

--NEW_MEMBER테이블을 TRUNCATE로 날려보자

--실행 전 되돌아갈 커밋 지점 생성
COMMIT;

--NEW_MEMBER 내용확인
SELECT m.*
  FROM NEW_MEMBER m
;

--TRUNCATE 로  NEW_MEMBER테이블 잘라내기
TRUNCATE TABLE NEW_MEMBER;

--되돌리기 시도
ROLLBACK;
--DDL 종류의 구문은 생성즉시 바로 커밋이 이루어짐.
--롤백의 시점이 이미 DDL실행 다음 시점으로 잡힘

------------------------------------------
--TCL : Transaction Control Languege
--1)COMMIT
--2)ROLLBACK

--3)SAVEPOINT
--1.NEW_MEMBER테이블에 1행 추가
INSERT INTO NEW_MEMBER(MEMBER_ID,MEMBER_NAME)
VALUES('M01','홍길동')
;
SAVEPOINT do_insert;

---2.'홍길동'데이터의 주소를 수정
UPDATE new_member m
   SET m.ADDRESS = '율도국'
 WHERE m.MEMBER_ID = 'M01'
 ;
 
 SAVEPOINT do_update_addr;
 
 ---3.홍길동 데이터의 전화번호를 수정
 UPDATE new_member m 
    SET m.PHONE = '0001'
  WHERE m.MEMBER_ID = 'M01'
  ;
  SAVEPOINT do_update_phone;
  
 UPDATE new_member m 
    SET m.GENDER = 'k'
  WHERE m.MEMBER_ID = 'M01';

SAVEPOINT do_update_gender;
  

------------------
--홍길동 데이터의 롤백 시나리오

--1.주소 수정까지는 맞는데, 전화번호,성별 수정은 잘못 됨
-- : 되돌아 가야할 SAVEPOINT = do_update_addr
ROLLBACK to do_update_addr;

--2.주소,전화번호까지 수정이 맞고,성별 수정이 잘못 됨
rollback to do_update_phone;

/*ORA-01086: savepoint 'DO_UPDATE_PHONE' never established in this session or is invalid
SAVEPOINT순서가 ADDR이 앞서기 때문에 */



truncate table new_member;

--3. 2번 수행 후 어디까지 롤백이 가능한가
ROLLBACK TO do_update_addr;
ROLLBACK TO do_insert;
ROLLBACK;
--savepoint 로 한번 되돌아 가면 되돌아간 시점 이후
--생성된 savepoint는 무효화 됨

-----------------------------------------------
--sequence : 기본 키 등으로 사용되는 일련번호 생성객체


--1.시작번호 : 1,최대 : 30, 사이클이 없는 시퀀스 생성
create sequence seq_member_id
START WITH 1
MAXVALUE 30
NOCYCLE
;
-- Sequence SEQ_MEMBER_ID이(가) 생성되었습니다.
--시퀀스가 생성되면 유저 딕셔너리에 정보가 저장됨
-- : user_sequences 

SELECT s.SEQUENCE_NAME
      ,s.MIN_VALUE
      ,s.MAX_VALUE
      ,s.CYCLE_FLAG
      ,s.INCREMENT_BY
  FROM user_sequences s
 WHERE s.SEQUENCE_NAME = 'SEQ_MEMBER_ID'
;
/*
SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, CYCLE_FLAG, INCREMENT_BY
SEQ_MEMBER_ID	1	          30	       N	      1
*/

--사용자의 객체가 저장되는 딕셔너리 테이블
-- : user_objects
--시퀀스나 테이블 인덱스들은 하나의 객체로 저장되기 때문에 
--타입이 다르더라도 같은 이름의 객체는 생성할 수 없음
select o.OBJECT_NAME
      ,o.OBJECT_ID
      ,o.OBJECT_TYPE
  from user_objects o
;


/*------------------------------
메타 데이터를 저장하는 유저 딕셔너리
--------------------------------
무결성 제약조건 : user_constraints
시퀀스 생성정보 : user_sequences
테이블 생성정보 : user_table
인덱스 생성정보 : user_indexes
객체들 생성정보 : user_onjects
--------------------------------
*/

--2.생성된 시퀀스 사용
----(1)nextval : 시퀀스의 다음 번호를 생성
--               CREATE되고 나서 반드시 최초한번은 
--               NEXTVAL 호출되야 생성됨

--사용법 : 시퀀스이름.NEXTVAL
SELECT SEQ_MEMBER_ID.NEXTVAL
FROM DUAL;
--MAXVALUE 이상 생성하면 
--ORA-08004: sequence SEQ_MEMBER_ID.NEXTVAL exceeds MAXVALUE and cannot be instantiated
--CYCLE설정을 NO CYCLE로 설정해서

----(2)CURVAL : 시퀀스에서 현재 생성된 번호 확인
--              시퀀스 생성 후 NEXTVAL 한번도 호출된 적 없으면 비활성화 상태
--      사용법 : 시퀀스이름.CURVAL
SELECT SEQ_MEMBER_ID.CURRVAL
FROM DUAL
;

CREATE SEQUENCE seq_test;

SELECT SEQ_TEST.CURRVAL
FROM DUAL
;
--ORA-08002: sequence SEQ_TEST.CURRVAL is not yet defined in this session
--최초 한번 실행하기 전엔 위와같은 오류가 뜸

--3.시퀀스 수정 : ALTER SEQUENCE
--               생성한 시퀀스 SEQ_MEMBER_ID의 MAXVALUE옵션을 NOMAXVALUE
ALTER SEQUENCE SEQ_MEMBER_ID
NOMAXVALUE;

--4.시퀀스 삭제 : DROP SEQUENCE
DROP SEQUENCE SEQ_MEMBER_ID;
--Sequence SEQ_MEMBER_ID이(가) 삭제되었습니다.

--존재하지 않는 시퀀스에서 CURRVAL시도
SELECT SEQ_MEMBER_ID.CURRVAL
FROM DUAL;
--ORA-02289: sequence does not exist

--멤버 아이디에 조합할 시퀀스 신규 생성
create sequence seq_member_id
START WITH 1
NOMAXVALUE
NOCYCLE
;
--일괄적으로 증가하는 값을 멤버아이디로 자동생성
--'M01','M02'...'M0x'이런 형태의 값을 조합
SELECT 'M'||LPAD(seq_member_id.NEXTVAL,2,0)
  FROM dual;

INSERT INTO NEW_MEMBER(MEMBER_ID,MEMBER_NAME)
VALUES(SELECT 'M'||LPAD(seq_member_id.CURRVAL,2,0)
  FROM dual;
      ,'허균');
      
-----------------------------------
--INDEX : 데이터의 검색(조회)시 일정한 검색 속도를 보장하기 위하여
--        DBMS가 관리하는 객체

--1.user_indexes 딕셔너리에서 검색
SELECT i.INDEX_NAME
      ,i.INDEX_TYPE
      ,i.TABLE_NAME
      ,i.INCLUDE_COLUMN
  FROM user_indexes i
;

--2.테이블의 주키(PK)컬럼에 대해서는 이미 DBMS가 자동으로
--  인덱스 생성함
--  따라서 또 생성 시도시 생성 불가능
--예)MEMBER 테이블의 MEMBER_ID 컬럼에 인덱스 생성시도
CREATE INDEX idx_member_id
ON member (member_id)
;
-- ORA-01408: such column list already indexed
--테이블 주키 컬럼에는 이미 있으므로 오류발생
--생성하는 인덱스 이름이 달라도 생성할 수 없음

--3.복사한 테이블인 new_member에는 pk가 없으므로 인덱스도 없는 상태
--new_member 테이블에 index생성시도
CREATE INDEX idx_new_member_id
ON new_member(member_id);


DROP INDEX IDC_NEW_MEMBER_ID
;

CREATE UNIQUE INDEX IDX_NEW_MEMBER_ID
ON NEW_MEMBER(MEMBER_ID)
;
SELECT i.INDEX_NAME
      ,i.INDEX_TYPE
      ,i.TABLE_NAME
      ,i.INCLUDE_COLUMN
  FROM user_indexes i
;
--INDEX가 명시적으로 사용되는 경우
--오라클에 빠른 검색을 위해 HINT절을 SELECT에 사용하는 
--경우가 존재
